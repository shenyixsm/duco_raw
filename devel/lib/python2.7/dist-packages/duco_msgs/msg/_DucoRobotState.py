# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duco_msgs/DucoRobotState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DucoRobotState(genpy.Message):
  _md5sum = "28ff9df01133ab7a99e78c6a90ffd27e"
  _type = "duco_msgs/DucoRobotState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[7]  joint_expect_position
float64[7]  joint_expect_velocity
float64[7]  joint_expect_accelera
float64[7]  joint_actual_position
float64[7]  joint_actual_velocity
float64[7]  joint_actual_accelera
float64[7]  joint_actual_current
float64[7]  joint_temperature
float64[7] driver_temperature
float64[7] cart_expect_position
float64[7] cart_expect_velocity
float64[7] cart_expect_accelera
float64[7] cart_actual_position
float64[7] cart_actual_velocity
float64[7] cart_actual_accelera
bool[7]   slave_ready
bool collision
int8 collision_axis
bool emc_stop_signal
int8 robot_state
int32 robot_error

"""
  __slots__ = ['joint_expect_position','joint_expect_velocity','joint_expect_accelera','joint_actual_position','joint_actual_velocity','joint_actual_accelera','joint_actual_current','joint_temperature','driver_temperature','cart_expect_position','cart_expect_velocity','cart_expect_accelera','cart_actual_position','cart_actual_velocity','cart_actual_accelera','slave_ready','collision','collision_axis','emc_stop_signal','robot_state','robot_error']
  _slot_types = ['float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','bool[7]','bool','int8','bool','int8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_expect_position,joint_expect_velocity,joint_expect_accelera,joint_actual_position,joint_actual_velocity,joint_actual_accelera,joint_actual_current,joint_temperature,driver_temperature,cart_expect_position,cart_expect_velocity,cart_expect_accelera,cart_actual_position,cart_actual_velocity,cart_actual_accelera,slave_ready,collision,collision_axis,emc_stop_signal,robot_state,robot_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DucoRobotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_expect_position is None:
        self.joint_expect_position = [0.] * 7
      if self.joint_expect_velocity is None:
        self.joint_expect_velocity = [0.] * 7
      if self.joint_expect_accelera is None:
        self.joint_expect_accelera = [0.] * 7
      if self.joint_actual_position is None:
        self.joint_actual_position = [0.] * 7
      if self.joint_actual_velocity is None:
        self.joint_actual_velocity = [0.] * 7
      if self.joint_actual_accelera is None:
        self.joint_actual_accelera = [0.] * 7
      if self.joint_actual_current is None:
        self.joint_actual_current = [0.] * 7
      if self.joint_temperature is None:
        self.joint_temperature = [0.] * 7
      if self.driver_temperature is None:
        self.driver_temperature = [0.] * 7
      if self.cart_expect_position is None:
        self.cart_expect_position = [0.] * 7
      if self.cart_expect_velocity is None:
        self.cart_expect_velocity = [0.] * 7
      if self.cart_expect_accelera is None:
        self.cart_expect_accelera = [0.] * 7
      if self.cart_actual_position is None:
        self.cart_actual_position = [0.] * 7
      if self.cart_actual_velocity is None:
        self.cart_actual_velocity = [0.] * 7
      if self.cart_actual_accelera is None:
        self.cart_actual_accelera = [0.] * 7
      if self.slave_ready is None:
        self.slave_ready = [False] * 7
      if self.collision is None:
        self.collision = False
      if self.collision_axis is None:
        self.collision_axis = 0
      if self.emc_stop_signal is None:
        self.emc_stop_signal = False
      if self.robot_state is None:
        self.robot_state = 0
      if self.robot_error is None:
        self.robot_error = 0
    else:
      self.joint_expect_position = [0.] * 7
      self.joint_expect_velocity = [0.] * 7
      self.joint_expect_accelera = [0.] * 7
      self.joint_actual_position = [0.] * 7
      self.joint_actual_velocity = [0.] * 7
      self.joint_actual_accelera = [0.] * 7
      self.joint_actual_current = [0.] * 7
      self.joint_temperature = [0.] * 7
      self.driver_temperature = [0.] * 7
      self.cart_expect_position = [0.] * 7
      self.cart_expect_velocity = [0.] * 7
      self.cart_expect_accelera = [0.] * 7
      self.cart_actual_position = [0.] * 7
      self.cart_actual_velocity = [0.] * 7
      self.cart_actual_accelera = [0.] * 7
      self.slave_ready = [False] * 7
      self.collision = False
      self.collision_axis = 0
      self.emc_stop_signal = False
      self.robot_state = 0
      self.robot_error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_7d().pack(*self.joint_expect_position))
      buff.write(_get_struct_7d().pack(*self.joint_expect_velocity))
      buff.write(_get_struct_7d().pack(*self.joint_expect_accelera))
      buff.write(_get_struct_7d().pack(*self.joint_actual_position))
      buff.write(_get_struct_7d().pack(*self.joint_actual_velocity))
      buff.write(_get_struct_7d().pack(*self.joint_actual_accelera))
      buff.write(_get_struct_7d().pack(*self.joint_actual_current))
      buff.write(_get_struct_7d().pack(*self.joint_temperature))
      buff.write(_get_struct_7d().pack(*self.driver_temperature))
      buff.write(_get_struct_7d().pack(*self.cart_expect_position))
      buff.write(_get_struct_7d().pack(*self.cart_expect_velocity))
      buff.write(_get_struct_7d().pack(*self.cart_expect_accelera))
      buff.write(_get_struct_7d().pack(*self.cart_actual_position))
      buff.write(_get_struct_7d().pack(*self.cart_actual_velocity))
      buff.write(_get_struct_7d().pack(*self.cart_actual_accelera))
      buff.write(_get_struct_7B().pack(*self.slave_ready))
      _x = self
      buff.write(_get_struct_BbBbi().pack(_x.collision, _x.collision_axis, _x.emc_stop_signal, _x.robot_state, _x.robot_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 56
      self.joint_expect_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_expect_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_expect_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_actual_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_actual_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_actual_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_actual_current = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_temperature = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.driver_temperature = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_expect_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_expect_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_expect_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_actual_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_actual_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.cart_actual_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 7
      self.slave_ready = _get_struct_7B().unpack(str[start:end])
      self.slave_ready = list(map(bool, self.slave_ready))
      _x = self
      start = end
      end += 8
      (_x.collision, _x.collision_axis, _x.emc_stop_signal, _x.robot_state, _x.robot_error,) = _get_struct_BbBbi().unpack(str[start:end])
      self.collision = bool(self.collision)
      self.emc_stop_signal = bool(self.emc_stop_signal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joint_expect_position.tostring())
      buff.write(self.joint_expect_velocity.tostring())
      buff.write(self.joint_expect_accelera.tostring())
      buff.write(self.joint_actual_position.tostring())
      buff.write(self.joint_actual_velocity.tostring())
      buff.write(self.joint_actual_accelera.tostring())
      buff.write(self.joint_actual_current.tostring())
      buff.write(self.joint_temperature.tostring())
      buff.write(self.driver_temperature.tostring())
      buff.write(self.cart_expect_position.tostring())
      buff.write(self.cart_expect_velocity.tostring())
      buff.write(self.cart_expect_accelera.tostring())
      buff.write(self.cart_actual_position.tostring())
      buff.write(self.cart_actual_velocity.tostring())
      buff.write(self.cart_actual_accelera.tostring())
      buff.write(self.slave_ready.tostring())
      _x = self
      buff.write(_get_struct_BbBbi().pack(_x.collision, _x.collision_axis, _x.emc_stop_signal, _x.robot_state, _x.robot_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 56
      self.joint_expect_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_expect_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_expect_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_actual_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_actual_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_actual_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_actual_current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.driver_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_expect_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_expect_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_expect_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_actual_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_actual_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.cart_actual_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 7
      self.slave_ready = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=7)
      self.slave_ready = list(map(bool, self.slave_ready))
      _x = self
      start = end
      end += 8
      (_x.collision, _x.collision_axis, _x.emc_stop_signal, _x.robot_state, _x.robot_error,) = _get_struct_BbBbi().unpack(str[start:end])
      self.collision = bool(self.collision)
      self.emc_stop_signal = bool(self.emc_stop_signal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_BbBbi = None
def _get_struct_BbBbi():
    global _struct_BbBbi
    if _struct_BbBbi is None:
        _struct_BbBbi = struct.Struct("<BbBbi")
    return _struct_BbBbi
