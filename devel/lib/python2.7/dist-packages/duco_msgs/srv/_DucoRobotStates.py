# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duco_msgs/DucoRobotStatesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DucoRobotStatesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "duco_msgs/DucoRobotStatesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DucoRobotStatesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duco_msgs/DucoRobotStatesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import duco_msgs.msg

class DucoRobotStatesResponse(genpy.Message):
  _md5sum = "7b889afd34d7cc1017eae13c8627bb97"
  _type = "duco_msgs/DucoRobotStatesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """duco_msgs/DucoRobotState robot_states


================================================================================
MSG: duco_msgs/DucoRobotState
float64[7]  joint_expect_position
float64[7]  joint_expect_velocity
float64[7]  joint_expect_accelera
float64[7]  joint_actual_position
float64[7]  joint_actual_velocity
float64[7]  joint_actual_accelera
float64[7]  joint_actual_current
float64[7]  joint_temperature
float64[7] driver_temperature
float64[7] cart_expect_position
float64[7] cart_expect_velocity
float64[7] cart_expect_accelera
float64[7] cart_actual_position
float64[7] cart_actual_velocity
float64[7] cart_actual_accelera
bool[7]   slave_ready
bool collision
int8 collision_axis
bool emc_stop_signal
int8 robot_state
int32 robot_error

"""
  __slots__ = ['robot_states']
  _slot_types = ['duco_msgs/DucoRobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DucoRobotStatesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_states is None:
        self.robot_states = duco_msgs.msg.DucoRobotState()
    else:
      self.robot_states = duco_msgs.msg.DucoRobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_expect_position))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_expect_velocity))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_expect_accelera))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_actual_position))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_actual_velocity))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_actual_accelera))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_actual_current))
      buff.write(_get_struct_7d().pack(*self.robot_states.joint_temperature))
      buff.write(_get_struct_7d().pack(*self.robot_states.driver_temperature))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_expect_position))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_expect_velocity))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_expect_accelera))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_actual_position))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_actual_velocity))
      buff.write(_get_struct_7d().pack(*self.robot_states.cart_actual_accelera))
      buff.write(_get_struct_7B().pack(*self.robot_states.slave_ready))
      _x = self
      buff.write(_get_struct_BbBbi().pack(_x.robot_states.collision, _x.robot_states.collision_axis, _x.robot_states.emc_stop_signal, _x.robot_states.robot_state, _x.robot_states.robot_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_states is None:
        self.robot_states = duco_msgs.msg.DucoRobotState()
      end = 0
      start = end
      end += 56
      self.robot_states.joint_expect_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_expect_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_expect_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_actual_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_actual_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_actual_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_actual_current = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.joint_temperature = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.driver_temperature = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_expect_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_expect_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_expect_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_actual_position = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_actual_velocity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.robot_states.cart_actual_accelera = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 7
      self.robot_states.slave_ready = _get_struct_7B().unpack(str[start:end])
      self.robot_states.slave_ready = list(map(bool, self.robot_states.slave_ready))
      _x = self
      start = end
      end += 8
      (_x.robot_states.collision, _x.robot_states.collision_axis, _x.robot_states.emc_stop_signal, _x.robot_states.robot_state, _x.robot_states.robot_error,) = _get_struct_BbBbi().unpack(str[start:end])
      self.robot_states.collision = bool(self.robot_states.collision)
      self.robot_states.emc_stop_signal = bool(self.robot_states.emc_stop_signal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.robot_states.joint_expect_position.tostring())
      buff.write(self.robot_states.joint_expect_velocity.tostring())
      buff.write(self.robot_states.joint_expect_accelera.tostring())
      buff.write(self.robot_states.joint_actual_position.tostring())
      buff.write(self.robot_states.joint_actual_velocity.tostring())
      buff.write(self.robot_states.joint_actual_accelera.tostring())
      buff.write(self.robot_states.joint_actual_current.tostring())
      buff.write(self.robot_states.joint_temperature.tostring())
      buff.write(self.robot_states.driver_temperature.tostring())
      buff.write(self.robot_states.cart_expect_position.tostring())
      buff.write(self.robot_states.cart_expect_velocity.tostring())
      buff.write(self.robot_states.cart_expect_accelera.tostring())
      buff.write(self.robot_states.cart_actual_position.tostring())
      buff.write(self.robot_states.cart_actual_velocity.tostring())
      buff.write(self.robot_states.cart_actual_accelera.tostring())
      buff.write(self.robot_states.slave_ready.tostring())
      _x = self
      buff.write(_get_struct_BbBbi().pack(_x.robot_states.collision, _x.robot_states.collision_axis, _x.robot_states.emc_stop_signal, _x.robot_states.robot_state, _x.robot_states.robot_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_states is None:
        self.robot_states = duco_msgs.msg.DucoRobotState()
      end = 0
      start = end
      end += 56
      self.robot_states.joint_expect_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_expect_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_expect_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_actual_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_actual_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_actual_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_actual_current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.joint_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.driver_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_expect_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_expect_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_expect_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_actual_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_actual_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.robot_states.cart_actual_accelera = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 7
      self.robot_states.slave_ready = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=7)
      self.robot_states.slave_ready = list(map(bool, self.robot_states.slave_ready))
      _x = self
      start = end
      end += 8
      (_x.robot_states.collision, _x.robot_states.collision_axis, _x.robot_states.emc_stop_signal, _x.robot_states.robot_state, _x.robot_states.robot_error,) = _get_struct_BbBbi().unpack(str[start:end])
      self.robot_states.collision = bool(self.robot_states.collision)
      self.robot_states.emc_stop_signal = bool(self.robot_states.emc_stop_signal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_BbBbi = None
def _get_struct_BbBbi():
    global _struct_BbBbi
    if _struct_BbBbi is None:
        _struct_BbBbi = struct.Struct("<BbBbi")
    return _struct_BbBbi
class DucoRobotStates(object):
  _type          = 'duco_msgs/DucoRobotStates'
  _md5sum = '7b889afd34d7cc1017eae13c8627bb97'
  _request_class  = DucoRobotStatesRequest
  _response_class = DucoRobotStatesResponse
