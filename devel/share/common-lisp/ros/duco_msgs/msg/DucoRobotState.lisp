; Auto-generated. Do not edit!


(cl:in-package duco_msgs-msg)


;//! \htmlinclude DucoRobotState.msg.html

(cl:defclass <DucoRobotState> (roslisp-msg-protocol:ros-message)
  ((joint_expect_position
    :reader joint_expect_position
    :initarg :joint_expect_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_expect_velocity
    :reader joint_expect_velocity
    :initarg :joint_expect_velocity
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_expect_accelera
    :reader joint_expect_accelera
    :initarg :joint_expect_accelera
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_actual_position
    :reader joint_actual_position
    :initarg :joint_actual_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_actual_velocity
    :reader joint_actual_velocity
    :initarg :joint_actual_velocity
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_actual_accelera
    :reader joint_actual_accelera
    :initarg :joint_actual_accelera
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_actual_current
    :reader joint_actual_current
    :initarg :joint_actual_current
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (joint_temperature
    :reader joint_temperature
    :initarg :joint_temperature
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (driver_temperature
    :reader driver_temperature
    :initarg :driver_temperature
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_expect_position
    :reader cart_expect_position
    :initarg :cart_expect_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_expect_velocity
    :reader cart_expect_velocity
    :initarg :cart_expect_velocity
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_expect_accelera
    :reader cart_expect_accelera
    :initarg :cart_expect_accelera
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_actual_position
    :reader cart_actual_position
    :initarg :cart_actual_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_actual_velocity
    :reader cart_actual_velocity
    :initarg :cart_actual_velocity
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (cart_actual_accelera
    :reader cart_actual_accelera
    :initarg :cart_actual_accelera
    :type (cl:vector cl:float)
   :initform (cl:make-array 7 :element-type 'cl:float :initial-element 0.0))
   (slave_ready
    :reader slave_ready
    :initarg :slave_ready
    :type (cl:vector cl:boolean)
   :initform (cl:make-array 7 :element-type 'cl:boolean :initial-element cl:nil))
   (collision
    :reader collision
    :initarg :collision
    :type cl:boolean
    :initform cl:nil)
   (collision_axis
    :reader collision_axis
    :initarg :collision_axis
    :type cl:fixnum
    :initform 0)
   (emc_stop_signal
    :reader emc_stop_signal
    :initarg :emc_stop_signal
    :type cl:boolean
    :initform cl:nil)
   (robot_state
    :reader robot_state
    :initarg :robot_state
    :type cl:fixnum
    :initform 0)
   (robot_error
    :reader robot_error
    :initarg :robot_error
    :type cl:integer
    :initform 0))
)

(cl:defclass DucoRobotState (<DucoRobotState>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <DucoRobotState>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'DucoRobotState)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name duco_msgs-msg:<DucoRobotState> is deprecated: use duco_msgs-msg:DucoRobotState instead.")))

(cl:ensure-generic-function 'joint_expect_position-val :lambda-list '(m))
(cl:defmethod joint_expect_position-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_expect_position-val is deprecated.  Use duco_msgs-msg:joint_expect_position instead.")
  (joint_expect_position m))

(cl:ensure-generic-function 'joint_expect_velocity-val :lambda-list '(m))
(cl:defmethod joint_expect_velocity-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_expect_velocity-val is deprecated.  Use duco_msgs-msg:joint_expect_velocity instead.")
  (joint_expect_velocity m))

(cl:ensure-generic-function 'joint_expect_accelera-val :lambda-list '(m))
(cl:defmethod joint_expect_accelera-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_expect_accelera-val is deprecated.  Use duco_msgs-msg:joint_expect_accelera instead.")
  (joint_expect_accelera m))

(cl:ensure-generic-function 'joint_actual_position-val :lambda-list '(m))
(cl:defmethod joint_actual_position-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_actual_position-val is deprecated.  Use duco_msgs-msg:joint_actual_position instead.")
  (joint_actual_position m))

(cl:ensure-generic-function 'joint_actual_velocity-val :lambda-list '(m))
(cl:defmethod joint_actual_velocity-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_actual_velocity-val is deprecated.  Use duco_msgs-msg:joint_actual_velocity instead.")
  (joint_actual_velocity m))

(cl:ensure-generic-function 'joint_actual_accelera-val :lambda-list '(m))
(cl:defmethod joint_actual_accelera-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_actual_accelera-val is deprecated.  Use duco_msgs-msg:joint_actual_accelera instead.")
  (joint_actual_accelera m))

(cl:ensure-generic-function 'joint_actual_current-val :lambda-list '(m))
(cl:defmethod joint_actual_current-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_actual_current-val is deprecated.  Use duco_msgs-msg:joint_actual_current instead.")
  (joint_actual_current m))

(cl:ensure-generic-function 'joint_temperature-val :lambda-list '(m))
(cl:defmethod joint_temperature-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:joint_temperature-val is deprecated.  Use duco_msgs-msg:joint_temperature instead.")
  (joint_temperature m))

(cl:ensure-generic-function 'driver_temperature-val :lambda-list '(m))
(cl:defmethod driver_temperature-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:driver_temperature-val is deprecated.  Use duco_msgs-msg:driver_temperature instead.")
  (driver_temperature m))

(cl:ensure-generic-function 'cart_expect_position-val :lambda-list '(m))
(cl:defmethod cart_expect_position-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_expect_position-val is deprecated.  Use duco_msgs-msg:cart_expect_position instead.")
  (cart_expect_position m))

(cl:ensure-generic-function 'cart_expect_velocity-val :lambda-list '(m))
(cl:defmethod cart_expect_velocity-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_expect_velocity-val is deprecated.  Use duco_msgs-msg:cart_expect_velocity instead.")
  (cart_expect_velocity m))

(cl:ensure-generic-function 'cart_expect_accelera-val :lambda-list '(m))
(cl:defmethod cart_expect_accelera-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_expect_accelera-val is deprecated.  Use duco_msgs-msg:cart_expect_accelera instead.")
  (cart_expect_accelera m))

(cl:ensure-generic-function 'cart_actual_position-val :lambda-list '(m))
(cl:defmethod cart_actual_position-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_actual_position-val is deprecated.  Use duco_msgs-msg:cart_actual_position instead.")
  (cart_actual_position m))

(cl:ensure-generic-function 'cart_actual_velocity-val :lambda-list '(m))
(cl:defmethod cart_actual_velocity-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_actual_velocity-val is deprecated.  Use duco_msgs-msg:cart_actual_velocity instead.")
  (cart_actual_velocity m))

(cl:ensure-generic-function 'cart_actual_accelera-val :lambda-list '(m))
(cl:defmethod cart_actual_accelera-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:cart_actual_accelera-val is deprecated.  Use duco_msgs-msg:cart_actual_accelera instead.")
  (cart_actual_accelera m))

(cl:ensure-generic-function 'slave_ready-val :lambda-list '(m))
(cl:defmethod slave_ready-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:slave_ready-val is deprecated.  Use duco_msgs-msg:slave_ready instead.")
  (slave_ready m))

(cl:ensure-generic-function 'collision-val :lambda-list '(m))
(cl:defmethod collision-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:collision-val is deprecated.  Use duco_msgs-msg:collision instead.")
  (collision m))

(cl:ensure-generic-function 'collision_axis-val :lambda-list '(m))
(cl:defmethod collision_axis-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:collision_axis-val is deprecated.  Use duco_msgs-msg:collision_axis instead.")
  (collision_axis m))

(cl:ensure-generic-function 'emc_stop_signal-val :lambda-list '(m))
(cl:defmethod emc_stop_signal-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:emc_stop_signal-val is deprecated.  Use duco_msgs-msg:emc_stop_signal instead.")
  (emc_stop_signal m))

(cl:ensure-generic-function 'robot_state-val :lambda-list '(m))
(cl:defmethod robot_state-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:robot_state-val is deprecated.  Use duco_msgs-msg:robot_state instead.")
  (robot_state m))

(cl:ensure-generic-function 'robot_error-val :lambda-list '(m))
(cl:defmethod robot_error-val ((m <DucoRobotState>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader duco_msgs-msg:robot_error-val is deprecated.  Use duco_msgs-msg:robot_error instead.")
  (robot_error m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <DucoRobotState>) ostream)
  "Serializes a message object of type '<DucoRobotState>"
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_expect_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_expect_velocity))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_expect_accelera))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_actual_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_actual_velocity))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_actual_accelera))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_actual_current))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'joint_temperature))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'driver_temperature))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_expect_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_expect_velocity))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_expect_accelera))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_actual_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_actual_velocity))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'cart_actual_accelera))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if ele 1 0)) ostream))
   (cl:slot-value msg 'slave_ready))
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'collision) 1 0)) ostream)
  (cl:let* ((signed (cl:slot-value msg 'collision_axis)) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 256) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    )
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'emc_stop_signal) 1 0)) ostream)
  (cl:let* ((signed (cl:slot-value msg 'robot_state)) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 256) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    )
  (cl:let* ((signed (cl:slot-value msg 'robot_error)) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 4294967296) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) unsigned) ostream)
    )
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <DucoRobotState>) istream)
  "Deserializes a message object of type '<DucoRobotState>"
  (cl:setf (cl:slot-value msg 'joint_expect_position) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_expect_position)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_expect_velocity) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_expect_velocity)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_expect_accelera) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_expect_accelera)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_actual_position) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_actual_position)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_actual_velocity) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_actual_velocity)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_actual_accelera) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_actual_accelera)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_actual_current) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_actual_current)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_temperature) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'joint_temperature)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'driver_temperature) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'driver_temperature)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_expect_position) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_expect_position)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_expect_velocity) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_expect_velocity)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_expect_accelera) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_expect_accelera)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_actual_position) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_actual_position)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_actual_velocity) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_actual_velocity)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'cart_actual_accelera) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'cart_actual_accelera)))
    (cl:dotimes (i 7)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'slave_ready) (cl:make-array 7))
  (cl:let ((vals (cl:slot-value msg 'slave_ready)))
    (cl:dotimes (i 7)
    (cl:setf (cl:aref vals i) (cl:not (cl:zerop (cl:read-byte istream))))))
    (cl:setf (cl:slot-value msg 'collision) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'collision_axis) (cl:if (cl:< unsigned 128) unsigned (cl:- unsigned 256))))
    (cl:setf (cl:slot-value msg 'emc_stop_signal) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'robot_state) (cl:if (cl:< unsigned 128) unsigned (cl:- unsigned 256))))
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) unsigned) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'robot_error) (cl:if (cl:< unsigned 2147483648) unsigned (cl:- unsigned 4294967296))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<DucoRobotState>)))
  "Returns string type for a message object of type '<DucoRobotState>"
  "duco_msgs/DucoRobotState")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'DucoRobotState)))
  "Returns string type for a message object of type 'DucoRobotState"
  "duco_msgs/DucoRobotState")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<DucoRobotState>)))
  "Returns md5sum for a message object of type '<DucoRobotState>"
  "28ff9df01133ab7a99e78c6a90ffd27e")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'DucoRobotState)))
  "Returns md5sum for a message object of type 'DucoRobotState"
  "28ff9df01133ab7a99e78c6a90ffd27e")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<DucoRobotState>)))
  "Returns full string definition for message of type '<DucoRobotState>"
  (cl:format cl:nil "float64[7]  joint_expect_position~%float64[7]  joint_expect_velocity~%float64[7]  joint_expect_accelera~%float64[7]  joint_actual_position~%float64[7]  joint_actual_velocity~%float64[7]  joint_actual_accelera~%float64[7]  joint_actual_current~%float64[7]  joint_temperature~%float64[7] driver_temperature~%float64[7] cart_expect_position~%float64[7] cart_expect_velocity~%float64[7] cart_expect_accelera~%float64[7] cart_actual_position~%float64[7] cart_actual_velocity~%float64[7] cart_actual_accelera~%bool[7]   slave_ready~%bool collision~%int8 collision_axis~%bool emc_stop_signal~%int8 robot_state~%int32 robot_error~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'DucoRobotState)))
  "Returns full string definition for message of type 'DucoRobotState"
  (cl:format cl:nil "float64[7]  joint_expect_position~%float64[7]  joint_expect_velocity~%float64[7]  joint_expect_accelera~%float64[7]  joint_actual_position~%float64[7]  joint_actual_velocity~%float64[7]  joint_actual_accelera~%float64[7]  joint_actual_current~%float64[7]  joint_temperature~%float64[7] driver_temperature~%float64[7] cart_expect_position~%float64[7] cart_expect_velocity~%float64[7] cart_expect_accelera~%float64[7] cart_actual_position~%float64[7] cart_actual_velocity~%float64[7] cart_actual_accelera~%bool[7]   slave_ready~%bool collision~%int8 collision_axis~%bool emc_stop_signal~%int8 robot_state~%int32 robot_error~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <DucoRobotState>))
  (cl:+ 0
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_expect_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_expect_velocity) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_expect_accelera) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_actual_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_actual_velocity) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_actual_accelera) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_actual_current) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_temperature) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'driver_temperature) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_expect_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_expect_velocity) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_expect_accelera) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_actual_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_actual_velocity) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'cart_actual_accelera) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'slave_ready) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
     1
     1
     1
     1
     4
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <DucoRobotState>))
  "Converts a ROS message object to a list"
  (cl:list 'DucoRobotState
    (cl:cons ':joint_expect_position (joint_expect_position msg))
    (cl:cons ':joint_expect_velocity (joint_expect_velocity msg))
    (cl:cons ':joint_expect_accelera (joint_expect_accelera msg))
    (cl:cons ':joint_actual_position (joint_actual_position msg))
    (cl:cons ':joint_actual_velocity (joint_actual_velocity msg))
    (cl:cons ':joint_actual_accelera (joint_actual_accelera msg))
    (cl:cons ':joint_actual_current (joint_actual_current msg))
    (cl:cons ':joint_temperature (joint_temperature msg))
    (cl:cons ':driver_temperature (driver_temperature msg))
    (cl:cons ':cart_expect_position (cart_expect_position msg))
    (cl:cons ':cart_expect_velocity (cart_expect_velocity msg))
    (cl:cons ':cart_expect_accelera (cart_expect_accelera msg))
    (cl:cons ':cart_actual_position (cart_actual_position msg))
    (cl:cons ':cart_actual_velocity (cart_actual_velocity msg))
    (cl:cons ':cart_actual_accelera (cart_actual_accelera msg))
    (cl:cons ':slave_ready (slave_ready msg))
    (cl:cons ':collision (collision msg))
    (cl:cons ':collision_axis (collision_axis msg))
    (cl:cons ':emc_stop_signal (emc_stop_signal msg))
    (cl:cons ':robot_state (robot_state msg))
    (cl:cons ':robot_error (robot_error msg))
))
