// Generated by gencpp from file duco_msgs/DucoIOStatesRequest.msg
// DO NOT EDIT!


#ifndef DUCO_MSGS_MESSAGE_DUCOIOSTATESREQUEST_H
#define DUCO_MSGS_MESSAGE_DUCOIOSTATESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duco_msgs
{
template <class ContainerAllocator>
struct DucoIOStatesRequest_
{
  typedef DucoIOStatesRequest_<ContainerAllocator> Type;

  DucoIOStatesRequest_()
    : ioOper(0)
    , type(0)
    , port(0)
    , value(false)  {
    }
  DucoIOStatesRequest_(const ContainerAllocator& _alloc)
    : ioOper(0)
    , type(0)
    , port(0)
    , value(false)  {
  (void)_alloc;
    }



   typedef int8_t _ioOper_type;
  _ioOper_type ioOper;

   typedef int8_t _type_type;
  _type_type type;

   typedef int8_t _port_type;
  _port_type port;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DucoIOStatesRequest_

typedef ::duco_msgs::DucoIOStatesRequest_<std::allocator<void> > DucoIOStatesRequest;

typedef boost::shared_ptr< ::duco_msgs::DucoIOStatesRequest > DucoIOStatesRequestPtr;
typedef boost::shared_ptr< ::duco_msgs::DucoIOStatesRequest const> DucoIOStatesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ioOper == rhs.ioOper &&
    lhs.type == rhs.type &&
    lhs.port == rhs.port &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "498c67270a90ac0f4a891a5f181ce99e";
  }

  static const char* value(const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x498c67270a90ac0fULL;
  static const uint64_t static_value2 = 0x4a891a5f181ce99eULL;
};

template<class ContainerAllocator>
struct DataType< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoIOStatesRequest";
  }

  static const char* value(const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#IO 操作类型 Get Set\n"
"int8 ioOper\n"
"#IO 类型\n"
"int8 type  # 0:gen io  1:tool io\n"
"#IO 端口\n"
"int8 port  #GEN IO 0--16  TOOL IO 0--1\n"
"#SetIO 值\n"
"bool value\n"
;
  }

  static const char* value(const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ioOper);
      stream.next(m.type);
      stream.next(m.port);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DucoIOStatesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duco_msgs::DucoIOStatesRequest_<ContainerAllocator>& v)
  {
    s << indent << "ioOper: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ioOper);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "port: ";
    Printer<int8_t>::stream(s, indent + "  ", v.port);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCO_MSGS_MESSAGE_DUCOIOSTATESREQUEST_H
