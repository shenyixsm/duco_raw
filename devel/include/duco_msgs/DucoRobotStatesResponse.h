// Generated by gencpp from file duco_msgs/DucoRobotStatesResponse.msg
// DO NOT EDIT!


#ifndef DUCO_MSGS_MESSAGE_DUCOROBOTSTATESRESPONSE_H
#define DUCO_MSGS_MESSAGE_DUCOROBOTSTATESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <duco_msgs/DucoRobotState.h>

namespace duco_msgs
{
template <class ContainerAllocator>
struct DucoRobotStatesResponse_
{
  typedef DucoRobotStatesResponse_<ContainerAllocator> Type;

  DucoRobotStatesResponse_()
    : robot_states()  {
    }
  DucoRobotStatesResponse_(const ContainerAllocator& _alloc)
    : robot_states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::duco_msgs::DucoRobotState_<ContainerAllocator>  _robot_states_type;
  _robot_states_type robot_states;





  typedef boost::shared_ptr< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DucoRobotStatesResponse_

typedef ::duco_msgs::DucoRobotStatesResponse_<std::allocator<void> > DucoRobotStatesResponse;

typedef boost::shared_ptr< ::duco_msgs::DucoRobotStatesResponse > DucoRobotStatesResponsePtr;
typedef boost::shared_ptr< ::duco_msgs::DucoRobotStatesResponse const> DucoRobotStatesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.robot_states == rhs.robot_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b889afd34d7cc1017eae13c8627bb97";
  }

  static const char* value(const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b889afd34d7cc10ULL;
  static const uint64_t static_value2 = 0x17eae13c8627bb97ULL;
};

template<class ContainerAllocator>
struct DataType< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoRobotStatesResponse";
  }

  static const char* value(const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoRobotState robot_states\n"
"\n"
"\n"
"================================================================================\n"
"MSG: duco_msgs/DucoRobotState\n"
"float64[7]  joint_expect_position\n"
"float64[7]  joint_expect_velocity\n"
"float64[7]  joint_expect_accelera\n"
"float64[7]  joint_actual_position\n"
"float64[7]  joint_actual_velocity\n"
"float64[7]  joint_actual_accelera\n"
"float64[7]  joint_actual_current\n"
"float64[7]  joint_temperature\n"
"float64[7] driver_temperature\n"
"float64[7] cart_expect_position\n"
"float64[7] cart_expect_velocity\n"
"float64[7] cart_expect_accelera\n"
"float64[7] cart_actual_position\n"
"float64[7] cart_actual_velocity\n"
"float64[7] cart_actual_accelera\n"
"bool[7]   slave_ready\n"
"bool collision\n"
"int8 collision_axis\n"
"bool emc_stop_signal\n"
"int8 robot_state\n"
"int32 robot_error\n"
"\n"
;
  }

  static const char* value(const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DucoRobotStatesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duco_msgs::DucoRobotStatesResponse_<ContainerAllocator>& v)
  {
    s << indent << "robot_states: ";
    s << std::endl;
    Printer< ::duco_msgs::DucoRobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_states);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCO_MSGS_MESSAGE_DUCOROBOTSTATESRESPONSE_H
