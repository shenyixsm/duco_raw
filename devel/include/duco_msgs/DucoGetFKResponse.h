// Generated by gencpp from file duco_msgs/DucoGetFKResponse.msg
// DO NOT EDIT!


#ifndef DUCO_MSGS_MESSAGE_DUCOGETFKRESPONSE_H
#define DUCO_MSGS_MESSAGE_DUCOGETFKRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duco_msgs
{
template <class ContainerAllocator>
struct DucoGetFKResponse_
{
  typedef DucoGetFKResponse_<ContainerAllocator> Type;

  DucoGetFKResponse_()
    : pos()
    , rpy()
    , success(false)  {
    }
  DucoGetFKResponse_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , rpy(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pos_type;
  _pos_type pos;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _rpy_type;
  _rpy_type rpy;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DucoGetFKResponse_

typedef ::duco_msgs::DucoGetFKResponse_<std::allocator<void> > DucoGetFKResponse;

typedef boost::shared_ptr< ::duco_msgs::DucoGetFKResponse > DucoGetFKResponsePtr;
typedef boost::shared_ptr< ::duco_msgs::DucoGetFKResponse const> DucoGetFKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.rpy == rhs.rpy &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9368ebb797527bfe0c6a0351f90a2ee";
  }

  static const char* value(const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9368ebb797527bfULL;
  static const uint64_t static_value2 = 0xe0c6a0351f90a2eeULL;
};

template<class ContainerAllocator>
struct DataType< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoGetFKResponse";
  }

  static const char* value(const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pos\n"
"float32[] rpy\n"
"bool success\n"
"\n"
"\n"
;
  }

  static const char* value(const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.rpy);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DucoGetFKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duco_msgs::DucoGetFKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duco_msgs::DucoGetFKResponse_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCO_MSGS_MESSAGE_DUCOGETFKRESPONSE_H
