// Generated by gencpp from file duco_msgs/DucoCommandRequest.msg
// DO NOT EDIT!


#ifndef DUCO_MSGS_MESSAGE_DUCOCOMMANDREQUEST_H
#define DUCO_MSGS_MESSAGE_DUCOCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duco_msgs
{
template <class ContainerAllocator>
struct DucoCommandRequest_
{
  typedef DucoCommandRequest_<ContainerAllocator> Type;

  DucoCommandRequest_()
    : commandType(0)
    , operateType(0)
    , script()
    , program()
    , col_on(false)
    , sensitivity(0)  {
    }
  DucoCommandRequest_(const ContainerAllocator& _alloc)
    : commandType(0)
    , operateType(0)
    , script(_alloc)
    , program(_alloc)
    , col_on(false)
    , sensitivity(0)  {
  (void)_alloc;
    }



   typedef int8_t _commandType_type;
  _commandType_type commandType;

   typedef int8_t _operateType_type;
  _operateType_type operateType;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _script_type;
  _script_type script;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _program_type;
  _program_type program;

   typedef uint8_t _col_on_type;
  _col_on_type col_on;

   typedef int8_t _sensitivity_type;
  _sensitivity_type sensitivity;





  typedef boost::shared_ptr< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DucoCommandRequest_

typedef ::duco_msgs::DucoCommandRequest_<std::allocator<void> > DucoCommandRequest;

typedef boost::shared_ptr< ::duco_msgs::DucoCommandRequest > DucoCommandRequestPtr;
typedef boost::shared_ptr< ::duco_msgs::DucoCommandRequest const> DucoCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duco_msgs::DucoCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duco_msgs::DucoCommandRequest_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.commandType == rhs.commandType &&
    lhs.operateType == rhs.operateType &&
    lhs.script == rhs.script &&
    lhs.program == rhs.program &&
    lhs.col_on == rhs.col_on &&
    lhs.sensitivity == rhs.sensitivity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duco_msgs::DucoCommandRequest_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa463fb7a35726e52ee3b1e6139d69b0";
  }

  static const char* value(const ::duco_msgs::DucoCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa463fb7a35726e5ULL;
  static const uint64_t static_value2 = 0x2ee3b1e6139d69b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoCommandRequest";
  }

  static const char* value(const ::duco_msgs::DucoCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#command type\n"
"int8 commandType\n"
"int8 operateType\n"
"\n"
"#script\n"
"string script\n"
"\n"
"#program name\n"
"string program\n"
"\n"
"#col_control\n"
"bool col_on\n"
"int8 sensitivity\n"
;
  }

  static const char* value(const ::duco_msgs::DucoCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commandType);
      stream.next(m.operateType);
      stream.next(m.script);
      stream.next(m.program);
      stream.next(m.col_on);
      stream.next(m.sensitivity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DucoCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duco_msgs::DucoCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duco_msgs::DucoCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "commandType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.commandType);
    s << indent << "operateType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.operateType);
    s << indent << "script: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.script);
    s << indent << "program: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.program);
    s << indent << "col_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.col_on);
    s << indent << "sensitivity: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sensitivity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCO_MSGS_MESSAGE_DUCOCOMMANDREQUEST_H
