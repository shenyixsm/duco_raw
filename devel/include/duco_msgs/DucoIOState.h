// Generated by gencpp from file duco_msgs/DucoIOState.msg
// DO NOT EDIT!


#ifndef DUCO_MSGS_MESSAGE_DUCOIOSTATE_H
#define DUCO_MSGS_MESSAGE_DUCOIOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <duco_msgs/DucoDigital.h>
#include <duco_msgs/DucoDigital.h>
#include <duco_msgs/DucoDigital.h>
#include <duco_msgs/DucoDigital.h>
#include <duco_msgs/DucoAnalog.h>
#include <duco_msgs/DucoAnalog.h>

namespace duco_msgs
{
template <class ContainerAllocator>
struct DucoIOState_
{
  typedef DucoIOState_<ContainerAllocator> Type;

  DucoIOState_()
    : stamp()
    , digital_in_states()
    , digital_out_states()
    , tool_in_states()
    , tool_out_states()
    , analog_in_states()
    , analog_out_states()  {
    }
  DucoIOState_(const ContainerAllocator& _alloc)
    : stamp(_alloc)
    , digital_in_states(_alloc)
    , digital_out_states(_alloc)
    , tool_in_states(_alloc)
    , tool_out_states(_alloc)
    , analog_in_states(_alloc)
    , analog_out_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::duco_msgs::DucoDigital_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoDigital_<ContainerAllocator> >> _digital_in_states_type;
  _digital_in_states_type digital_in_states;

   typedef std::vector< ::duco_msgs::DucoDigital_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoDigital_<ContainerAllocator> >> _digital_out_states_type;
  _digital_out_states_type digital_out_states;

   typedef std::vector< ::duco_msgs::DucoDigital_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoDigital_<ContainerAllocator> >> _tool_in_states_type;
  _tool_in_states_type tool_in_states;

   typedef std::vector< ::duco_msgs::DucoDigital_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoDigital_<ContainerAllocator> >> _tool_out_states_type;
  _tool_out_states_type tool_out_states;

   typedef std::vector< ::duco_msgs::DucoAnalog_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoAnalog_<ContainerAllocator> >> _analog_in_states_type;
  _analog_in_states_type analog_in_states;

   typedef std::vector< ::duco_msgs::DucoAnalog_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duco_msgs::DucoAnalog_<ContainerAllocator> >> _analog_out_states_type;
  _analog_out_states_type analog_out_states;





  typedef boost::shared_ptr< ::duco_msgs::DucoIOState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duco_msgs::DucoIOState_<ContainerAllocator> const> ConstPtr;

}; // struct DucoIOState_

typedef ::duco_msgs::DucoIOState_<std::allocator<void> > DucoIOState;

typedef boost::shared_ptr< ::duco_msgs::DucoIOState > DucoIOStatePtr;
typedef boost::shared_ptr< ::duco_msgs::DucoIOState const> DucoIOStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duco_msgs::DucoIOState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duco_msgs::DucoIOState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duco_msgs::DucoIOState_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoIOState_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.digital_in_states == rhs.digital_in_states &&
    lhs.digital_out_states == rhs.digital_out_states &&
    lhs.tool_in_states == rhs.tool_in_states &&
    lhs.tool_out_states == rhs.tool_out_states &&
    lhs.analog_in_states == rhs.analog_in_states &&
    lhs.analog_out_states == rhs.analog_out_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duco_msgs::DucoIOState_<ContainerAllocator1> & lhs, const ::duco_msgs::DucoIOState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duco_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoIOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duco_msgs::DucoIOState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoIOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duco_msgs::DucoIOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoIOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duco_msgs::DucoIOState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duco_msgs::DucoIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2117ca0370ade6c80af07d396a3ecddd";
  }

  static const char* value(const ::duco_msgs::DucoIOState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2117ca0370ade6c8ULL;
  static const uint64_t static_value2 = 0x0af07d396a3ecdddULL;
};

template<class ContainerAllocator>
struct DataType< ::duco_msgs::DucoIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duco_msgs/DucoIOState";
  }

  static const char* value(const ::duco_msgs::DucoIOState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duco_msgs::DucoIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string stamp \n"
"DucoDigital[] digital_in_states\n"
"DucoDigital[] digital_out_states\n"
"DucoDigital[] tool_in_states\n"
"DucoDigital[] tool_out_states\n"
"DucoAnalog[] analog_in_states\n"
"DucoAnalog[] analog_out_states\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: duco_msgs/DucoDigital\n"
"uint8 pin\n"
"bool flag\n"
"bool state\n"
"\n"
"================================================================================\n"
"MSG: duco_msgs/DucoAnalog\n"
"uint8 pin\n"
"float64 state\n"
;
  }

  static const char* value(const ::duco_msgs::DucoIOState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duco_msgs::DucoIOState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.digital_in_states);
      stream.next(m.digital_out_states);
      stream.next(m.tool_in_states);
      stream.next(m.tool_out_states);
      stream.next(m.analog_in_states);
      stream.next(m.analog_out_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DucoIOState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duco_msgs::DucoIOState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duco_msgs::DucoIOState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.stamp);
    s << indent << "digital_in_states[]" << std::endl;
    for (size_t i = 0; i < v.digital_in_states.size(); ++i)
    {
      s << indent << "  digital_in_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoDigital_<ContainerAllocator> >::stream(s, indent + "    ", v.digital_in_states[i]);
    }
    s << indent << "digital_out_states[]" << std::endl;
    for (size_t i = 0; i < v.digital_out_states.size(); ++i)
    {
      s << indent << "  digital_out_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoDigital_<ContainerAllocator> >::stream(s, indent + "    ", v.digital_out_states[i]);
    }
    s << indent << "tool_in_states[]" << std::endl;
    for (size_t i = 0; i < v.tool_in_states.size(); ++i)
    {
      s << indent << "  tool_in_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoDigital_<ContainerAllocator> >::stream(s, indent + "    ", v.tool_in_states[i]);
    }
    s << indent << "tool_out_states[]" << std::endl;
    for (size_t i = 0; i < v.tool_out_states.size(); ++i)
    {
      s << indent << "  tool_out_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoDigital_<ContainerAllocator> >::stream(s, indent + "    ", v.tool_out_states[i]);
    }
    s << indent << "analog_in_states[]" << std::endl;
    for (size_t i = 0; i < v.analog_in_states.size(); ++i)
    {
      s << indent << "  analog_in_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoAnalog_<ContainerAllocator> >::stream(s, indent + "    ", v.analog_in_states[i]);
    }
    s << indent << "analog_out_states[]" << std::endl;
    for (size_t i = 0; i < v.analog_out_states.size(); ++i)
    {
      s << indent << "  analog_out_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duco_msgs::DucoAnalog_<ContainerAllocator> >::stream(s, indent + "    ", v.analog_out_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCO_MSGS_MESSAGE_DUCOIOSTATE_H
